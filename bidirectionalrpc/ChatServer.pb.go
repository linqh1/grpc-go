// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bidirectionalrpc/ChatServer.proto

package bidirectionalrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type ChatInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatInfo) Reset()         { *m = ChatInfo{} }
func (m *ChatInfo) String() string { return proto.CompactTextString(m) }
func (*ChatInfo) ProtoMessage()    {}
func (*ChatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab7732804d9018c, []int{0}
}

func (m *ChatInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatInfo.Unmarshal(m, b)
}
func (m *ChatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatInfo.Marshal(b, m, deterministic)
}
func (m *ChatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatInfo.Merge(m, src)
}
func (m *ChatInfo) XXX_Size() int {
	return xxx_messageInfo_ChatInfo.Size(m)
}
func (m *ChatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChatInfo proto.InternalMessageInfo

func (m *ChatInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ChatInfo)(nil), "bidirectionalrpc.ChatInfo")
}

func init() { proto.RegisterFile("bidirectionalrpc/ChatServer.proto", fileDescriptor_cab7732804d9018c) }

var fileDescriptor_cab7732804d9018c = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xca, 0x4c, 0xc9,
	0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x4b, 0xcc, 0x29, 0x2a, 0x48, 0xd6, 0x77, 0xce, 0x48,
	0x2c, 0x09, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x40,
	0x57, 0xa2, 0x24, 0xc7, 0xc5, 0x01, 0x52, 0xe5, 0x99, 0x97, 0x96, 0x2f, 0x24, 0xc4, 0xc5, 0x92,
	0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x1b, 0x85, 0x72, 0x71,
	0x21, 0x4c, 0x11, 0x72, 0xe7, 0x62, 0x77, 0x4f, 0x2d, 0x09, 0x49, 0x2c, 0xce, 0x16, 0x92, 0xd2,
	0x43, 0x37, 0x4b, 0x0f, 0x66, 0x90, 0x14, 0x1e, 0x39, 0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0x7b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xb4, 0xd4, 0xb2, 0xb4, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServerClient is the client API for ChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServerClient interface {
	// Sends a greeting
	GetTask(ctx context.Context, opts ...grpc.CallOption) (ChatServer_GetTaskClient, error)
}

type chatServerClient struct {
	cc *grpc.ClientConn
}

func NewChatServerClient(cc *grpc.ClientConn) ChatServerClient {
	return &chatServerClient{cc}
}

func (c *chatServerClient) GetTask(ctx context.Context, opts ...grpc.CallOption) (ChatServer_GetTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatServer_serviceDesc.Streams[0], "/bidirectionalrpc.ChatServer/GetTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerGetTaskClient{stream}
	return x, nil
}

type ChatServer_GetTaskClient interface {
	Send(*ChatInfo) error
	Recv() (*ChatInfo, error)
	grpc.ClientStream
}

type chatServerGetTaskClient struct {
	grpc.ClientStream
}

func (x *chatServerGetTaskClient) Send(m *ChatInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServerGetTaskClient) Recv() (*ChatInfo, error) {
	m := new(ChatInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServerServer is the server API for ChatServer service.
type ChatServerServer interface {
	// Sends a greeting
	GetTask(ChatServer_GetTaskServer) error
}

// UnimplementedChatServerServer can be embedded to have forward compatible implementations.
type UnimplementedChatServerServer struct {
}

func (*UnimplementedChatServerServer) GetTask(srv ChatServer_GetTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}

func RegisterChatServerServer(s *grpc.Server, srv ChatServerServer) {
	s.RegisterService(&_ChatServer_serviceDesc, srv)
}

func _ChatServer_GetTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServerServer).GetTask(&chatServerGetTaskServer{stream})
}

type ChatServer_GetTaskServer interface {
	Send(*ChatInfo) error
	Recv() (*ChatInfo, error)
	grpc.ServerStream
}

type chatServerGetTaskServer struct {
	grpc.ServerStream
}

func (x *chatServerGetTaskServer) Send(m *ChatInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServerGetTaskServer) Recv() (*ChatInfo, error) {
	m := new(ChatInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bidirectionalrpc.ChatServer",
	HandlerType: (*ChatServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTask",
			Handler:       _ChatServer_GetTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectionalrpc/ChatServer.proto",
}
